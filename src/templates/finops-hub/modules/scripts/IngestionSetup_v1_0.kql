// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

//===| Prices |=========================================================================================================
// NOTE: Must be before cost details.
//
// Supported versions:
// - MS EA 2023-05-01  -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/price-sheet-ea
// - MS MCA 2023-05-01 -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/price-sheet-mca
//======================================================================================================================

// Create prices raw table
.create table AzureCostPrices_raw (ContextDate:datetime, Context:string, RawData:dynamic)

// Create schema mapping for prices raw table
.create table AzureCostPrices_raw ingestion json mapping 'JsonPricesMapping'
'['
'    { "column" : "ContextDate", "Properties": {"Path":"$.date"}, "datatype" : "datetime"},'
'    { "column" : "Context", "Properties": {"Path":"$.context"}},'
'    { "column" : "RawData", "Properties": {"Path":"$.data"}}'
']'

// Create container for prices
.create-or-alter function AzureCostPrices_render(rawPrices:(ContextDate:datetime, Context:string, RawData:dynamic))
{
    rawPrices
    | mv-expand RawData
    | project-away Context
    | extend
        MeterId = tostring(RawData.meterId),
        BatchNumber = toint(RawData.batchNumber),
        BatchCount = toint(RawData.batchCount),
        ContextDate = todatetime(RawData.date),
        MeterName = tostring(RawData.meterName),
        MeterCategory = tostring(RawData.meterCategory),
        MeterSubCategory = tostring(RawData.meterSubCategory),
        MeterRegion = tostring(RawData.meterRegion),
        UnitOfMeasure = tostring(RawData.unitOfMeasure),
        PartNumber = tostring(RawData.partNumber),
        UnitPrice = toreal(RawData.unitPrice),
        CurrencyCode = tostring(RawData.currencyCode),
        OfferName = tostring(RawData.offerName),
        IsEA = tobool(RawData.isEA),
        TierMinimumUnits = toreal(RawData.tierMinimumUnits),
        EffectiveStartDate = todatetime(RawData.effectiveStartDate),
        EffectiveEndDate = todatetime(RawData.effectiveEndDate),
        AccountName = tostring(RawData.accountName),
        AccountId = tostring(RawData.accountId),
        SubscriptionName = tostring(RawData.subscriptionName),
        SubscriptionId = tostring(RawData.subscriptionId)
    | project-away RawData
}

// Create optimized prices table
.create-or-alter 
    table [set(toscalar(Ingestion.settings | where name == "OptimizedCostPrices" | project value))]
    (ContextDate:datetime, MeterId:string, BatchNumber:int, BatchCount:int, MeterName:string, MeterCategory:string, MeterSubCategory:string, MeterRegion:string,
    UnitOfMeasure:string, PartNumber:string, UnitPrice:real, CurrencyCode:string, OfferName:string, IsEA:bool, TierMinimumUnits:real,
    EffectiveStartDate:datetime, EffectiveEndDate:datetime, AccountName:string, AccountId:string, SubscriptionName:string, SubscriptionId:string)

// Create update policy for AzureCostPrices_raw to optimized prices table
.alter table AzureCostPrices_raw policy update
@'[{"IsEnabled": true, "Source": "AzureCostPrices_raw", "Query": "AzureCostPrices_render()", "IsTransactional": true, "PropagateIngestionProperties": false}]'

// Keep raw prices data for a set retention period using a soft delete policy
.alter-merge table AzureCostPrices_raw policy retention
```
{
  "SoftDeletePeriod": "0.00:00:00",
  "Recoverability": "Enabled"
}
```

//===| Cost and Usage |=================================================================================================
// Supported versions:
// - MS: 1.0, 1.0-preview(v1) -- See https://aka.ms/costmgmt/exports/focus
// - AWS: 1.0                 -- See https://docs.aws.amazon.com/cur/latest/userguide/table-dictionary-focus-1-0-aws-columns.html
// - GCP: Jan-Jun 2024        -- See https://cloud.google.com/resources/google-cloud-focus?e=48754805&hl=en
//                                   Links to (Aug 2024): https://services.google.com/fh/files/misc/focus_guide_v1.pdf
//                               See also:
//                               - https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables/standard-usage
//                               - https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables/detailed-usage
// - OCI: 1.0                 -- See https://docs.oracle.com/iaas/Content/Billing/Concepts/costusagereportsoverview.htm#costreports__focus-cost-report-schema
//
// Support for non-Azure data is limited to ingestion only. Data is not transformed across versions.
//======================================================================================================================

// Create raw table for cost and usage data
.create table AzureCostExportRaw_raw (ContextDate:datetime, Context:string, RawData:dynamic)

// Create schema mapping for cost and usage raw table
.create table AzureCostExportRaw_raw ingestion json mapping 'JsonMapping'
'['
'    { "column" : "ContextDate", "Properties": {"Path":"$.date"}, "datatype" : "datetime"},'
'    { "column" : "Context", "Properties": {"Path":"$.context"}},'
'    { "column" : "RawData", "Properties": {"Path":"$.data"}}'
']'

// Create container for cost and usage data
.create-or-alter function AzureCostExportRaw_render(rawCost:(ContextDate:datetime, Context:string, RawData:dynamic))
{
    rawCost
    | mv-expand RawData
    | project-away Context
    | extend
        Tag_Keys = dynamic([]),
        Tag_Values = dynamic([])
    | mv-apply keys = RawData.tags on
    (
        extend Tag_Keys = array_concat(Tag_Keys, pack_array(tostring(keys)))
    )
    | mv-apply values = RawData.tags on
    (
        extend Tag_Values = array_concat(Tag_Values, pack_array(tostring(values)))
    )
    | extend
        id = tostring(RawData.id),
        Tags = bag_pack_columns(Tag_Keys, Tag_Values),
        invoiceId = tostring(RawData.invoiceId),
        providerId = tostring(RawData.providerId),
        providerName = tostring(RawData.providerName),
        serviceFamily = tostring(RawData.serviceFamily),
        productName = tostring(RawData.productName),
        productId = tostring(RawData.productId),
        partNumber = tostring(RawData.partNumber),
        meterId = tostring(RawData.meterId),
        billingAccountId = tostring(RawData.billingAccountId),
        billingAccountName = tostring(RawData.billingAccountName),
        billingProfileId = tostring(RawData.billingProfileId),
        billingProfileName = tostring(RawData.billingProfileName),
        subscriptionId = tostring(RawData.subscriptionId),
        subscriptionName = tostring(RawData.subscriptionName),
        resourceGroupName = tostring(RawData.resourceGroupName),
        resourceId = tostring(RawData.resourceId),
        resourceName = tostring(RawData.resourceName),
        serviceName = tostring(RawData.serviceName),
        date = todatetime(RawData.date),
        quantity = toreal(RawData.quantity),
        effectivePrice = toreal(RawData.effectivePrice),
        cost = toreal(RawData.cost),
        costInBillingCurrency = toreal(RawData.costInBillingCurrency),
        costInPricingCurrency = toreal(RawData.costInPricingCurrency),
        costCenter = tostring(RawData.costCenter),
        billingCurrency = tostring(RawData.billingCurrency),
        pricingCurrency = tostring(RawData.pricingCurrency),
        exchangeRateDate = todatetime(RawData.exchangeRateDate),
        exchangeRatePricingToBilling = toreal(RawData.exchangeRatePricingToBilling),
        unitPrice = toreal(RawData.unitPrice),
        productOrderId = tostring(RawData.productOrderId),
        productOrderName = tostring(RawData.productOrderName),
        term = tostring(RawData.term),
        publisherName = tostring(RawData.publisherName),
        publisherId = tostring(RawData.publisherId),
        planName = tostring(RawData.planName),
        planId = tostring(RawData.planId),
        isAzureCreditEligible = tobool(RawData.isAzureCreditEligible),
        serviceInfo1 = tostring(RawData.serviceInfo1),
        serviceInfo2 = tostring(RawData.serviceInfo2),
        additionalInfo = tostring(RawData.additionalInfo),
        
        /* DI additionalInfo fields */
        // AdditionalInfo fields:
        //   - energyExportWaterAdjusted: NUMBER
        //   - energyMeterExport: NUMBER
        //   - energyMeterExportUtc: TIMESTAMP
        //   - energyMeterImport: NUMBER
        //   - energyMeterImportUtc: TIMESTAMP
        //   - meterType: STRING
        //   - peakTime: BOOLEAN
        //   - resourceUri: STRING
        //   - scenario: STRING
        //   - serviceType: STRING
        //   - site: STRING
        //   - uom: STRING
        additionalInfo_dynamic = iff(isnotempty(additionalInfo), parse_json(additionalInfo), dynamic(null)),
        additionalInfoDiResourceUri = tostring(additionalInfo_dynamic.resourceUri),
        additionalInfoDiEnergyExportWaterAdjusted = toreal(additionalInfo_dynamic.energyExportWaterAdjusted),
        additionalInfoDiEnergyMeterExport = toreal(additionalInfo_dynamic.energyMeterExport),
        additionalInfoDiEnergyMeterExportUtc = todatetime(additionalInfo_dynamic.energyMeterExportUtc),
        additionalInfoDiEnergyMeterImport = toreal(additionalInfo_dynamic.energyMeterImport),
        additionalInfoDiEnergyMeterImportUtc = todatetime(additionalInfo_dynamic.energyMeterImportUtc),
        additionalInfoDiMeterType = tostring(additionalInfo_dynamic.meterType),
        additionalInfoDiPeakTime = tobool(additionalInfo_dynamic.peakTime),
        additionalInfoDiScenario = tostring(additionalInfo_dynamic.scenario),
        additionalInfoDiServiceType = tostring(additionalInfo_dynamic.serviceType),
        additionalInfoDiSite = tostring(additionalInfo_dynamic.site),
        additionalInfoDiUnitOfMeasure = tostring(additionalInfo_dynamic.uom),
        
        /* Marketplace additionalInfo fields */
        // AdditionalInfo fields:
        //   - PricingCurrency: STRING
        //   - PCToBCExchangeRate: NUMBER
        additionalInfoMarketplacePricingCurrency = tostring(additionalInfo_dynamic.PricingCurrency),
        additionalInfoMarketplacePcToBcExchangeRate = toreal(additionalInfo_dynamic.PCToBCExchangeRate),
        
        /* Storage additionalInfo fields */
        // AdditionalInfo fields:
        //   - BillingPreTaxTotal: NUMBER
        //   - ConsumptionMeter: STRING
        //   - ConsumptionPrice: NUMBER
        //   - ConsumptionQuantity: NUMBER
        //   - CreditAmount: NUMBER
        //   - CreditType: STRING
        //   - Currency: STRING
        //   - ProductLevel: STRING
        //   - ReservationId: STRING
        //   - ReservationName: STRING
        //   - UnitPrice: NUMBER
        additionalInfoStorageBillingPreTaxTotal = toreal(additionalInfo_dynamic.BillingPreTaxTotal),
        additionalInfoStorageConsumptionMeter = tostring(additionalInfo_dynamic.ConsumptionMeter),
        additionalInfoStorageConsumptionPrice = toreal(additionalInfo_dynamic.ConsumptionPrice),
        additionalInfoStorageConsumptionQuantity = toreal(additionalInfo_dynamic.ConsumptionQuantity),
        additionalInfoStorageCreditAmount = toreal(additionalInfo_dynamic.CreditAmount),
        additionalInfoStorageCreditType = tostring(additionalInfo_dynamic.CreditType),
        additionalInfoStorageCurrency = tostring(additionalInfo_dynamic.Currency),
        additionalInfoStorageProductLevel = tostring(additionalInfo_dynamic.ProductLevel),
        additionalInfoStorageReservationId = tostring(additionalInfo_dynamic.ReservationId),
        additionalInfoStorageReservationName = tostring(additionalInfo_dynamic.ReservationName),
        additionalInfoStorageUnitPrice = toreal(additionalInfo_dynamic.UnitPrice),
        
        // AdditionalInfo fields - Generic properties:
        additionalInfoArmSkuName = tostring(additionalInfo_dynamic.armSkuName),
        additionalInfoArmSkuFamily = tostring(additionalInfo_dynamic.armSkuFamily),
        additionalInfoArmRegionName = tostring(additionalInfo_dynamic.armRegionName),
        additionalInfoProjectName = tostring(additionalInfo_dynamic.projectName),
        additionalInfoMeterId = tostring(additionalInfo_dynamic.MeterId),
        
        // In future, use dynamic LookupColumnExpansion rather than manual expansion
        // https://learn.microsoft.com/en-us/azure/data-explorer/kusto/management/updatepolicy#lookupcolumnexpansion
        
        /* Resource details */
        resourceGroup = tostring(split(iff(isnotempty(resourceId), resourceId, serviceInfo1), "/", 4)),
        location = tostring(RawData.resourceLocation),
        
        /* Billing period */
        billingPeriodStartDate = todatetime(RawData.billingPeriodStartDate),
        billingPeriodEndDate = todatetime(RawData.billingPeriodEndDate),
        
        /* Charge Type */
        chargeType = tostring(RawData.chargeType),
        
        /* Frequency */
        frequency = tostring(RawData.frequency),
        
        /* Price */
        listPrice = toreal(RawData.listPrice),
        priceAdjustmentSource = tostring(RawData.priceAdjustmentSource),
        
        /* Pricing Details */
        pricing = dynamic({}),
        pricingQuantity = toreal(RawData.quantity),
        pricingUnitPrice = toreal(RawData.unitPrice),
        pricingEffectivePrice = toreal(RawData.effectivePrice),
        pricingExchangeRate = toreal(RawData.exchangeRatePricingToBilling),
        
        /* Reservation */
        benefitId = tostring(RawData.benefitId),
        benefitName = tostring(RawData.benefitName)
    | project-away RawData, additionalInfo_dynamic
}

// Create optimized cost and usage table
.create-or-alter 
    table [set(toscalar(Ingestion.settings | where name == "OptimizedCostDetails" | project value))]
    (id:string, Tags:dynamic, invoiceId:string, providerId:string, providerName:string, serviceFamily:string, productName:string, productId:string,
    partNumber:string, meterId:string, billingAccountId:string, billingAccountName:string, billingProfileId:string, billingProfileName:string,
    subscriptionId:string, subscriptionName:string, resourceGroupName:string, resourceId:string, resourceName:string, serviceName:string, date:datetime,
    quantity:real, effectivePrice:real, cost:real, costInBillingCurrency:real, costInPricingCurrency:real, costCenter:string, billingCurrency:string,
    pricingCurrency:string, exchangeRateDate:datetime, exchangeRatePricingToBilling:real, unitPrice:real, productOrderId:string, productOrderName:string,
    term:string, publisherName:string, publisherId:string, planName:string, planId:string, isAzureCreditEligible:bool, serviceInfo1:string, serviceInfo2:string,
    additionalInfo:string, additionalInfoDiResourceUri:string, additionalInfoDiEnergyExportWaterAdjusted:real, additionalInfoDiEnergyMeterExport:real,
    additionalInfoDiEnergyMeterExportUtc:datetime, additionalInfoDiEnergyMeterImport:real, additionalInfoDiEnergyMeterImportUtc:datetime,
    additionalInfoDiMeterType:string, additionalInfoDiPeakTime:bool, additionalInfoDiScenario:string, additionalInfoDiServiceType:string,
    additionalInfoDiSite:string, additionalInfoDiUnitOfMeasure:string, additionalInfoMarketplacePricingCurrency:string,
    additionalInfoMarketplacePcToBcExchangeRate:real, additionalInfoStorageBillingPreTaxTotal:real, additionalInfoStorageConsumptionMeter:string,
    additionalInfoStorageConsumptionPrice:real, additionalInfoStorageConsumptionQuantity:real, additionalInfoStorageCreditAmount:real,
    additionalInfoStorageCreditType:string, additionalInfoStorageCurrency:string, additionalInfoStorageProductLevel:string,
    additionalInfoStorageReservationId:string, additionalInfoStorageReservationName:string, additionalInfoStorageUnitPrice:real, additionalInfoArmSkuName:string,
    additionalInfoArmSkuFamily:string, additionalInfoArmRegionName:string, additionalInfoProjectName:string, additionalInfoMeterId:string,
    resourceGroup:string, location:string, billingPeriodStartDate:datetime, billingPeriodEndDate:datetime, chargeType:string, frequency:string,
    listPrice:real, priceAdjustmentSource:string, pricing:dynamic, pricingQuantity:real, pricingUnitPrice:real, pricingEffectivePrice:real,
    pricingExchangeRate:real, benefitId:string, benefitName:string)

// Create update policy for AzureCostExportRaw_raw to optimized cost and usage table
.alter table AzureCostExportRaw_raw policy update
@'[{"IsEnabled": true, "Source": "AzureCostExportRaw_raw", "Query": "AzureCostExportRaw_render()", "IsTransactional": true, "PropagateIngestionProperties": false}]'

// Keep raw cost and usage data for a set retention period using a soft delete policy
.alter-merge table AzureCostExportRaw_raw policy retention
```
{
  "SoftDeletePeriod": "0.00:00:00",
  "Recoverability": "Enabled"
}
```

//===| CommitmentDiscountUsage |========================================================================================
// Supported versions:
// - MS EA reservation details: 2023-03-01  -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/reservation-details-ea
// - MS MCA reservation details: 2023-03-01 -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/reservation-details-mca
//======================================================================================================================

// Create raw table for commitment discount usage
.create table AzureCostExportReservationCharges_raw (ContextDate:datetime, Context:string, RawData:dynamic)

// Create schema mapping for commitment discount usage raw table
.create table AzureCostExportReservationCharges_raw ingestion json mapping 'JsonMapping'
'['
'    { "column" : "ContextDate", "Properties": {"Path":"$.date"}, "datatype" : "datetime"},'
'    { "column" : "Context", "Properties": {"Path":"$.context"}},'
'    { "column" : "RawData", "Properties": {"Path":"$.data"}}'
']'

// Create raw table for savings plan charges
.create table AzureCostExportSavingsPlanCharges_raw (ContextDate:datetime, Context:string, RawData:dynamic)

// Create schema mapping for savings plan charges raw table
.create table AzureCostExportSavingsPlanCharges_raw ingestion json mapping 'JsonMapping'
'['
'    { "column" : "ContextDate", "Properties": {"Path":"$.date"}, "datatype" : "datetime"},'
'    { "column" : "Context", "Properties": {"Path":"$.context"}},'
'    { "column" : "RawData", "Properties": {"Path":"$.data"}}'
']'

// Create container for reservation charges
.create-or-alter function AzureCostExportReservationCharges_render(rawCommitmentCharges:(ContextDate:datetime, Context:string, RawData:dynamic))
{
    rawCommitmentCharges
    | mv-expand RawData
    | project-away Context
    | extend
        id = tostring(RawData.id),
        eventDate = RawData.eventDate,
        reservationId = tostring(RawData.reservationId),
        skuName = tostring(RawData.skuName),
        reservationName = tostring(RawData.reservationName),
        description = tostring(RawData.description),
        eventType = tostring(RawData.eventType),
        quantity = toreal(RawData.quantity),
        amount = toreal(RawData.amount),
        currency = tostring(RawData.currency),
        resourceId = tostring(RawData.resourceId),
        pretaxCharges = toreal(RawData.pretaxCharges),
        consumedServiceName = tostring(RawData.consumedServiceName),
        departmentName = tostring(RawData.departmentName),
        costCenter = tostring(RawData.costCenter),
        accountId = tostring(RawData.accountId),
        accountName = tostring(RawData.accountName),
        accountOwnerEmail = tostring(RawData.accountOwnerEmail),
        subscriptionId = tostring(RawData.subscriptionId),
        subscriptionName = tostring(RawData.subscriptionName),
        date = todatetime(RawData.date)
    | project-away RawData
}

// Create container for savings plan charges
.create-or-alter function AzureCostExportSavingsPlanCharges_render(rawCommitmentCharges:(ContextDate:datetime, Context:string, RawData:dynamic))
{
    rawCommitmentCharges
    | mv-expand RawData
    | project-away Context
    | extend
        id = tostring(RawData.id),
        benefitId = tostring(RawData.benefitId),
        cardName = tostring(RawData.cardName),
        purchaseType = tostring(RawData.purchaseType),
        currency = tostring(RawData.currency),
        pretaxCost = toreal(RawData.pretaxCost),
        quantity = toreal(RawData.quantity),
        term = tostring(RawData.term),
        usageDatePeriodStart = todatetime(RawData.usageDatePeriodStart),
        usageDatePeriodEnd = todatetime(RawData.usageDatePeriodEnd),
        activityBillingPeriodStart = todatetime(RawData.activityBillingPeriodStart),
        activityBillingPeriodEnd = todatetime(RawData.activityBillingPeriodEnd),
        pretaxNormalizedCost = toreal(RawData.pretaxNormalizedCost),
        frequency = tostring(RawData.frequency),
        eventDate = todatetime(RawData.eventDate),
        accountName = tostring(RawData.accountName),
        accountId = tostring(RawData.accountId),
        subscriptionName = tostring(RawData.subscriptionName),
        subscriptionId = tostring(RawData.subscriptionId),
        serviceName = tostring(RawData.serviceName),
        date = todatetime(RawData.date)
    | project-away RawData
}

// Create optimized commitment discount usage table
.create-or-alter 
    table [set(toscalar(Ingestion.settings | where name == "OptimizedCommitmentDiscountCharges" | project value))]
    (id:string, eventDate:dynamic, benefitId:string, reservationId:string, skuName:string, reservationName:string, cardName:string, description:string,
    eventType:string, purchaseType:string, quantity:real, amount:real, currency:string, resourceId:string, pretaxCharges:real, consumedServiceName:string,
    departmentName:string, costCenter:string, accountId:string, accountName:string, accountOwnerEmail:string, subscriptionId:string, subscriptionName:string,
    date:datetime, pretaxCost:real, term:string, usageDatePeriodStart:datetime, usageDatePeriodEnd:datetime, activityBillingPeriodStart:datetime,
    activityBillingPeriodEnd:datetime, pretaxNormalizedCost:real, frequency:string, serviceName:string)

// Create update policy for AzureCostExportReservationCharges_raw to optimized commitment discount usage table
.alter table AzureCostExportReservationCharges_raw policy update
@'[{"IsEnabled": true, "Source": "AzureCostExportReservationCharges_raw", "Query": "AzureCostExportReservationCharges_render()", "IsTransactional": true, "PropagateIngestionProperties": false}]'

// Create update policy for AzureCostExportSavingsPlanCharges_raw to optimized commitment discount usage table
.alter table AzureCostExportSavingsPlanCharges_raw policy update
@'[{"IsEnabled": true, "Source": "AzureCostExportSavingsPlanCharges_raw", "Query": "AzureCostExportSavingsPlanCharges_render()", "IsTransactional": true, "PropagateIngestionProperties": false}]'

// Keep raw commitment discount usage data for a set retention period using a soft delete policy
.alter-merge table AzureCostExportReservationCharges_raw policy retention
```
{
  "SoftDeletePeriod": "0.00:00:00",
  "Recoverability": "Enabled"
}
```

// Keep raw savings plan charges data for a set retention period using a soft delete policy
.alter-merge table AzureCostExportSavingsPlanCharges_raw policy retention
```
{
  "SoftDeletePeriod": "0.00:00:00",
  "Recoverability": "Enabled"
}
```

//===| Recommendations |================================================================================================
// Supported datasets/versions:
// - MS CM EA reservation recommendations: 2023-05-01  -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/reservation-recommendations-ea
// - MS CM MCA reservation recommendations: 2023-05-01 -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/reservation-recommendations-mca
//======================================================================================================================

// Create raw table for recommendations
.create table AzureRecommendations_raw (ContextDate:datetime, Context:string, RawData:dynamic)

// Create schema mapping for recommendations raw table
.create table AzureRecommendations_raw ingestion json mapping 'JsonMapping'
'['
'    { "column" : "ContextDate", "Properties": {"Path":"$.date"}, "datatype" : "datetime"},'
'    { "column" : "Context", "Properties": {"Path":"$.context"}},'
'    { "column" : "RawData", "Properties": {"Path":"$.data"}}'
']'

// Create container for recommendations
.create-or-alter function AzureRecommendations_render(rawRecommendations:(ContextDate:datetime, Context:string, RawData:dynamic))
{
    rawRecommendations
    | mv-expand RawData
    | project-away Context
    | extend
        Tag_Keys = dynamic([]),
        Tag_Values = dynamic([])
    | mv-apply keys = RawData.tags on
    (
        extend Tag_Keys = array_concat(Tag_Keys, pack_array(tostring(keys)))
    )
    | mv-apply values = RawData.tags on
    (
        extend Tag_Values = array_concat(Tag_Values, pack_array(tostring(values)))
    )
    | extend
        id = tostring(RawData.id),
        name = tostring(RawData.name),
        Tags = bag_pack_columns(Tag_Keys, Tag_Values),
        type = tostring(RawData.type),
        subscriptionId = tostring(RawData.subscriptionId),
        subscriptionName = tostring(RawData.subscriptionName),
        resourceGroup = tostring(RawData.resourceGroup),
        recommendationType = tostring(RawData.recommendationType),
        recommendationCategory = tostring(RawData.recommendationCategory),
        recommendationImpact = tostring(RawData.recommendationImpact),
        recommendationRisk = tostring(RawData.recommendationRisk),
        extendedProperties = RawData.extendedProperties,
        costEstimation = todouble(RawData.costEstimation),
        shortDescription = RawData.shortDescription,
        longDescription = RawData.longDescription,
        resourceMetadata = RawData.resourceMetadata,
        LeaseContractLength = tostring(RawData.LeaseContractLength),
        PurchaseOption = tostring(RawData.PurchaseOption),
        saving = todouble(RawData.saving),
        savingCurrency = tostring(RawData.savingCurrency),
        potentialSaving = todouble(RawData.potentialSaving),
        suppressionInfo = RawData.suppressionInfo,
        createdOn = todatetime(RawData.createdOn),
        lastUpdated = todatetime(RawData.lastUpdated),
        date = todatetime(RawData.date)
    | project-away RawData
}

// Create optimized recommendations table
.create-or-alter 
    table [set(toscalar(Ingestion.settings | where name == "OptimizedCostRecommendations" | project value))]
    (id:string, name:string, Tags:dynamic, type:string, subscriptionId:string, subscriptionName:string, resourceGroup:string, recommendationType:string,
    recommendationCategory:string, recommendationImpact:string, recommendationRisk:string, extendedProperties:dynamic, costEstimation:real,
    shortDescription:dynamic, longDescription:dynamic, resourceMetadata:dynamic, LeaseContractLength:string, PurchaseOption:string, saving:real,
    savingCurrency:string, potentialSaving:real, suppressionInfo:dynamic, createdOn:datetime, lastUpdated:datetime, date:datetime)

// Create update policy for AzureRecommendations_raw to optimized recommendations table
.alter table AzureRecommendations_raw policy update
@'[{"IsEnabled": true, "Source": "AzureRecommendations_raw", "Query": "AzureRecommendations_render()", "IsTransactional": true, "PropagateIngestionProperties": false}]'

// Keep raw recommendations data for a set retention period using a soft delete policy
.alter-merge table AzureRecommendations_raw policy retention
```
{
  "SoftDeletePeriod": "0.00:00:00",
  "Recoverability": "Enabled"
}
```

//===| Transactions |===================================================================================================
// Supported versions:
// - MS CM EA reservation transactions: 2023-05-01  -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/reservation-transactions-ea
// - MS CM MCA reservation transactions: 2023-05-01 -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/reservation-transactions-mca
//======================================================================================================================

// Create raw table for transactions
.create table AzureTransactions_raw (ContextDate:datetime, Context:string, RawData:dynamic)

// Create schema mapping for transactions raw table
.create table AzureTransactions_raw ingestion json mapping 'JsonMapping'
'['
'    { "column" : "ContextDate", "Properties": {"Path":"$.date"}, "datatype" : "datetime"},'
'    { "column" : "Context", "Properties": {"Path":"$.context"}},'
'    { "column" : "RawData", "Properties": {"Path":"$.data"}}'
']'

// Create container for transactions
.create-or-alter function AzureTransactions_render(rawTransactions:(ContextDate:datetime, Context:string, RawData:dynamic))
{
    rawTransactions
    | mv-expand RawData
    | project-away Context
    | extend
        id = tostring(RawData.id),
        billingAccountId = tostring(RawData.billingAccountId),
        billingAccountName = tostring(RawData.billingAccountName),
        billingProfileId = tostring(RawData.billingProfileId),
        billingProfileName = tostring(RawData.billingProfileName),
        invoiceSectionId = tostring(RawData.invoiceSectionId),
        invoiceSectionName = tostring(RawData.invoiceSectionName),
        partnerId = tostring(RawData.partnerId),
        partnerName = tostring(RawData.partnerName),
        customerId = tostring(RawData.customerId),
        customerName = tostring(RawData.customerName),
        costCenter = tostring(RawData.costCenter),
        invoiceId = tostring(RawData.invoiceId),
        productId = tostring(RawData.productId),
        productName = tostring(RawData.productName),
        resourceId = tostring(RawData.resourceId),
        serviceName = tostring(RawData.serviceName),
        serviceType = tostring(RawData.serviceType),
        subscriptionId = tostring(RawData.subscriptionId),
        subscriptionName = tostring(RawData.subscriptionName),
        date = todatetime(RawData.date),
        unitPrice = toreal(RawData.unitPrice),
        quantity = toreal(RawData.quantity),
        taxPercent = toreal(RawData.taxPercent),
        preTaxCost = toreal(RawData.preTaxCost),
        tax = toreal(RawData.tax),
        cost = toreal(RawData.cost),
        chargeFrequency = tostring(RawData.chargeFrequency),
        publisher = tostring(RawData.publisher),
        reservationId = tostring(RawData.reservationId),
        reservationName = tostring(RawData.reservationName),
        purchaseId = tostring(RawData.purchaseId),
        orderName = tostring(RawData.orderName),
        orderId = tostring(RawData.orderId),
        pricingCurrency = tostring(RawData.pricingCurrency),
        paymentCurrency = tostring(RawData.paymentCurrency),
        exchangeRate = toreal(RawData.exchangeRate),
        unitPriceInPricingCurrency = toreal(RawData.unitPriceInPricingCurrency),
        preTaxCostInPricingCurrency = toreal(RawData.preTaxCostInPricingCurrency),
        taxInPricingCurrency = toreal(RawData.taxInPricingCurrency),
        totalCostInPricingCurrency = toreal(RawData.totalCostInPricingCurrency),
        discount = toreal(RawData.discount),
        termDuration = tostring(RawData.termDuration),
        trialType = tostring(RawData.trialType),
        discountedPrice = toreal(RawData.discountedPrice),
        discountPercentage = toreal(RawData.discountPercentage),
        discountedUnitPrice = toreal(RawData.discountedUnitPrice),
        discountValuation = toreal(RawData.discountValuation)
    | project-away RawData
}

// Create table for transactions data
.create-or-alter table AzureTransactions
    (id:string, billingAccountId:string, billingAccountName:string, billingProfileId:string, billingProfileName:string, invoiceSectionId:string,
    invoiceSectionName:string, partnerId:string, partnerName:string, customerId:string, customerName:string, costCenter:string, invoiceId:string,
    productId:string, productName:string, resourceId:string, serviceName:string, serviceType:string, subscriptionId:string, subscriptionName:string,
    date:datetime, unitPrice:real, quantity:real, taxPercent:real, preTaxCost:real, tax:real, cost:real, chargeFrequency:string, publisher:string,
    reservationId:string, reservationName:string, purchaseId:string, orderName:string, orderId:string, pricingCurrency:string, paymentCurrency:string,
    exchangeRate:real, unitPriceInPricingCurrency:real, preTaxCostInPricingCurrency:real, taxInPricingCurrency:real, totalCostInPricingCurrency:real,
    discount:real, termDuration:string, trialType:string, discountedPrice:real, discountPercentage:real, discountedUnitPrice:real, discountValuation:real)

// Create update policy for AzureTransactions_raw to transactions table
.alter table AzureTransactions_raw policy update
@'[{"IsEnabled": true, "Source": "AzureTransactions_raw", "Query": "AzureTransactions_render()", "IsTransactional": true, "PropagateIngestionProperties": false}]'

// Keep raw transactions data for a set retention period using a soft delete policy
.alter-merge table AzureTransactions_raw policy retention
```
{
  "SoftDeletePeriod": "0.00:00:00",
  "Recoverability": "Enabled"
}
```
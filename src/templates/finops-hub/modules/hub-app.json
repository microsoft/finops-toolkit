{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "14670356862329858753"
    }
  },
  "definitions": {
    "_1.HubDeploymentConfig": {
      "type": "object",
      "properties": {
        "tagsByResource": {
          "type": "object"
        },
        "storage": {
          "type": "string"
        },
        "isTelemetryEnabled": {
          "type": "bool"
        }
      },
      "metadata": {
        "tagsByResource": "Tags to apply to resources based on their resource type.",
        "storage": "Name of the storage account used for deployment scripts.",
        "isTelemetryEnabled": "Indicates whether telemetry should be enabled for deployments.",
        "description": "FinOps hub deployment settings.",
        "__bicep_imported_from!": {
          "sourceTemplate": "hub-types.bicep"
        }
      }
    },
    "_1.HubInstanceConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "safeName": {
          "type": "string"
        },
        "suffix": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "tags": {
          "type": "object"
        },
        "version": {
          "type": "string"
        }
      },
      "metadata": {
        "id": "FinOps hub resource ID.",
        "name": "FinOps hub instance name.",
        "safeName": "Safe name of the FinOps hub instance without underscores.",
        "suffix": "Unique suffix used for shared resources.",
        "location": "Azure resource location of the FinOps hub instance.",
        "tags": "Tags to apply to all FinOps hub resources.",
        "version": "FinOps hub version number.",
        "description": "FinOps hub instance details.",
        "__bicep_imported_from!": {
          "sourceTemplate": "hub-types.bicep"
        }
      }
    },
    "_1.HubNetworkConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isPrivate": {
          "type": "bool"
        },
        "addressPrefix": {
          "type": "string"
        },
        "dnsZones": {
          "type": "object",
          "properties": {
            "blob": {
              "$ref": "#/definitions/_1.IdNameObject"
            },
            "dfs": {
              "$ref": "#/definitions/_1.IdNameObject"
            },
            "queue": {
              "$ref": "#/definitions/_1.IdNameObject"
            },
            "table": {
              "$ref": "#/definitions/_1.IdNameObject"
            }
          }
        },
        "subnets": {
          "type": "object",
          "properties": {
            "dataFactory": {
              "type": "string"
            },
            "keyVault": {
              "type": "string"
            },
            "scripts": {
              "type": "string"
            },
            "storage": {
              "type": "string"
            }
          }
        }
      },
      "metadata": {
        "id": "Resource ID of the FinOps hub isolated virtual network, if private networking is enabled.",
        "name": "Name of the FinOps hub isolated virtual network, if private networking is enabled.",
        "isPrivate": "Indicates whether private networking is enabled.",
        "addressPrefix": "Address prefix for the FinOps hub isolated virtual network, if private networking is enabled.",
        "dnsZones": {
          "blob": "Resource ID and name for the blob storage DNS zone.",
          "dfs": "Resource ID and name for the DFS storage DNS zone.",
          "queue": "Resource ID and name for the queue storage DNS zone.",
          "table": "Resource ID and name for the table storage DNS zone."
        },
        "subnets": {
          "dataFactory": "Resource ID of the subnet for Data Factory instances.",
          "keyVault": "Resource ID of the subnet for Key Vault instances.",
          "scripts": "Resource ID of the subnet for deployment script storage.",
          "storage": "Resource ID of the subnet for storage accounts."
        },
        "description": "FinOps hub network settings.",
        "__bicep_imported_from!": {
          "sourceTemplate": "hub-types.bicep"
        }
      }
    },
    "_1.HubStorageConfig": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "isInfrastructureEncrypted": {
          "type": "bool"
        }
      },
      "metadata": {
        "sku": "Storage account SKU. Allowed values: \"Premium_LRS\", \"Premium_ZRS\".",
        "isInfrastructureEncrypted": "Indicates whether infrastructure encryption is enabled for the storage account.",
        "description": "FinOps hub storage settings to be used when creating storage accounts.",
        "__bicep_imported_from!": {
          "sourceTemplate": "hub-types.bicep"
        }
      }
    },
    "_1.HubVaultConfig": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        }
      },
      "metadata": {
        "sku": "KeyVault SKU. Allowed values: \"standard\", \"premium\".",
        "description": "FinOps hub KeyVault settings to be used when creating vaults.",
        "__bicep_imported_from!": {
          "sourceTemplate": "hub-types.bicep"
        }
      }
    },
    "_1.IdNameObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "metadata": {
        "id": "Fully-qualified resource ID.",
        "name": "Resource name.",
        "description": "Resource ID and name.",
        "__bicep_imported_from!": {
          "sourceTemplate": "hub-types.bicep"
        }
      }
    },
    "HubAppConfig": {
      "type": "object",
      "properties": {
        "hub": {
          "$ref": "#/definitions/_1.HubInstanceConfig"
        },
        "deployment": {
          "$ref": "#/definitions/_1.HubDeploymentConfig"
        },
        "storage": {
          "$ref": "#/definitions/_1.HubStorageConfig"
        },
        "keyVault": {
          "$ref": "#/definitions/_1.HubVaultConfig"
        },
        "network": {
          "$ref": "#/definitions/_1.HubNetworkConfig"
        },
        "publisher": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "dataFactory": {
              "type": "string"
            },
            "keyVault": {
              "type": "string"
            },
            "storage": {
              "type": "string"
            }
          }
        },
        "app": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "fullName": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          }
        }
      },
      "metadata": {
        "hub": "FinOps hub instance details",
        "deployment": "FinOps hub deployment details",
        "storage": "FinOps hub storage details",
        "network": "FinOps hub network details",
        "publisher": {
          "uniqueId": "Unique suffix used for publisher resources.",
          "name": "Fully-qualified namespace of the FinOps hub app publisher.",
          "displayName": "Display name of the FinOps hub app publisher.",
          "tags": "Tags to apply to all FinOps hub resources for this FinOps hub app publisher.",
          "dataFactory": "Name of the Data Factory instance for this publisher.",
          "keyVault": "Name of the KeyVault instance for this publisher.",
          "storage": "Name of the storage account for this publisher.",
          "subnetId": "Resource ID of the private endpoint subnet for the storage account."
        },
        "app": {
          "name": "Short name of the FinOps hub app (not including the publisher namespace).",
          "fullName": "Fully-qualified namespace of the FinOps hub app.",
          "displayName": "Display name of the FinOps hub app.",
          "tags": "Tags to apply to all FinOps hub resources for this FinOps hub app."
        },
        "description": "FinOps hub app configuration settings.",
        "__bicep_imported_from!": {
          "sourceTemplate": "hub-types.bicep"
        }
      }
    },
    "HubAppFeature": {
      "type": "string",
      "allowedValues": [
        "DataFactory",
        "KeyVault",
        "Storage"
      ],
      "metadata": {
        "description": "FinOps hub app features.",
        "__bicep_imported_from!": {
          "sourceTemplate": "hub-types.bicep"
        }
      }
    },
    "HubCoreConfig": {
      "type": "object",
      "properties": {
        "hub": {
          "$ref": "#/definitions/_1.HubInstanceConfig"
        },
        "deployment": {
          "$ref": "#/definitions/_1.HubDeploymentConfig"
        },
        "storage": {
          "$ref": "#/definitions/_1.HubStorageConfig"
        },
        "keyVault": {
          "$ref": "#/definitions/_1.HubVaultConfig"
        },
        "network": {
          "$ref": "#/definitions/_1.HubNetworkConfig"
        }
      },
      "metadata": {
        "hub": "FinOps hub instance details",
        "deployment": "FinOps hub deployment details",
        "storage": "FinOps hub storage details",
        "keyVault": "FinOps hub KeyVault details",
        "network": "FinOps hub network details",
        "description": "FinOps hub configuration settings.",
        "__bicep_imported_from!": {
          "sourceTemplate": "hub-types.bicep"
        }
      }
    }
  },
  "functions": [
    {
      "namespace": "__bicep",
      "members": {
        "getAppTags": {
          "parameters": [
            {
              "$ref": "#/definitions/HubAppConfig",
              "name": "config"
            },
            {
              "type": "string",
              "name": "resourceType"
            },
            {
              "type": "bool",
              "nullable": true,
              "name": "forceAppTags"
            }
          ],
          "output": {
            "type": "object",
            "value": "[union(if(or(variables('_1.usePublisherSpecificResources'), coalesce(parameters('forceAppTags'), false())), parameters('config').app.tags, parameters('config').hub.tags), coalesce(tryGet(parameters('config').deployment.tagsByResource, parameters('resourceType')), createObject()))]"
          },
          "metadata": {
            "description": "Returns a tags dictionary that includes tags for the FinOps hub app.",
            "__bicep_imported_from!": {
              "sourceTemplate": "hub-types.bicep"
            }
          }
        },
        "getPublisherTags": {
          "parameters": [
            {
              "$ref": "#/definitions/HubAppConfig",
              "name": "config"
            },
            {
              "type": "string",
              "name": "resourceType"
            }
          ],
          "output": {
            "type": "object",
            "value": "[union(if(variables('_1.usePublisherSpecificResources'), parameters('config').publisher.tags, parameters('config').hub.tags), coalesce(tryGet(parameters('config').deployment.tagsByResource, parameters('resourceType')), createObject()))]"
          },
          "metadata": {
            "description": "Returns a tags dictionary that includes tags for the FinOps hub app publisher.",
            "__bicep_imported_from!": {
              "sourceTemplate": "hub-types.bicep"
            }
          }
        },
        "newAppConfig": {
          "parameters": [
            {
              "$ref": "#/definitions/HubCoreConfig",
              "name": "config"
            },
            {
              "type": "string",
              "name": "publisher"
            },
            {
              "type": "string",
              "name": "namespace"
            },
            {
              "type": "string",
              "name": "appName"
            },
            {
              "type": "string",
              "name": "displayName"
            },
            {
              "type": "string",
              "name": "version"
            },
            {
              "type": "string",
              "name": "customStorageName"
            },
            {
              "type": "string",
              "name": "customDataFactoryName"
            },
            {
              "type": "string",
              "name": "customKeyVaultName"
            }
          ],
          "output": {
            "$ref": "#/definitions/HubAppConfig",
            "value": "[_1.newAppInternalConfig(parameters('config'), parameters('publisher'), parameters('namespace'), if(or(not(variables('_1.usePublisherSpecificResources')), equals(parameters('namespace'), 'Microsoft.FinOpsToolkit.Hubs')), parameters('config').hub.suffix, uniqueString(parameters('namespace'))), createObject('ftk-hubapp-publisher', parameters('namespace')), parameters('appName'), format('{0}.{1}', parameters('namespace'), parameters('appName')), parameters('displayName'), parameters('version'), parameters('customStorageName'), parameters('customDataFactoryName'), parameters('customKeyVaultName'))]"
          },
          "metadata": {
            "description": "Creates a new FinOps hub app configuration object.",
            "__bicep_imported_from!": {
              "sourceTemplate": "hub-types.bicep"
            }
          }
        }
      }
    },
    {
      "namespace": "_1",
      "members": {
        "newAppInternalConfig": {
          "parameters": [
            {
              "$ref": "#/definitions/HubCoreConfig",
              "name": "coreConfig"
            },
            {
              "type": "string",
              "name": "publisher"
            },
            {
              "type": "string",
              "name": "namespace"
            },
            {
              "type": "string",
              "name": "publisherSuffix"
            },
            {
              "type": "object",
              "name": "publisherTags"
            },
            {
              "type": "string",
              "name": "appName"
            },
            {
              "type": "string",
              "name": "appNamespace"
            },
            {
              "type": "string",
              "name": "displayName"
            },
            {
              "type": "string",
              "name": "version"
            },
            {
              "type": "string",
              "name": "customStorageName"
            },
            {
              "type": "string",
              "name": "customDataFactoryName"
            },
            {
              "type": "string",
              "name": "customKeyVaultName"
            }
          ],
          "output": {
            "$ref": "#/definitions/HubAppConfig",
            "value": "[shallowMerge(createArray(parameters('coreConfig'), createObject('publisher', createObject('name', parameters('namespace'), 'displayName', parameters('publisher'), 'suffix', parameters('publisherSuffix'), 'tags', union(parameters('coreConfig').hub.tags, parameters('publisherTags')), 'dataFactory', if(not(empty(parameters('customDataFactoryName'))), parameters('customDataFactoryName'), replace(format('{0}{1}', take(format('{0}-engine', replace(parameters('coreConfig').hub.name, '_', '-')), sub(63, length(parameters('publisherSuffix')))), parameters('publisherSuffix')), '--', '-')), 'keyVault', if(not(empty(parameters('customKeyVaultName'))), parameters('customKeyVaultName'), replace(format('{0}{1}', take(format('{0}-vault', replace(parameters('coreConfig').hub.name, '_', '-')), sub(24, length(parameters('publisherSuffix')))), parameters('publisherSuffix')), '--', '-')), 'storage', if(not(empty(parameters('customStorageName'))), parameters('customStorageName'), format('{0}{1}', take(parameters('coreConfig').hub.safeName, sub(24, length(parameters('publisherSuffix')))), parameters('publisherSuffix')))), 'app', createObject('name', parameters('appName'), 'fullName', parameters('appNamespace'), 'displayName', parameters('displayName'), 'tags', union(parameters('coreConfig').hub.tags, parameters('publisherTags'), createObject('ftk-hubapp', parameters('appNamespace'), 'ftk-hubapp-version', parameters('version')))))))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "hub-types.bicep"
            }
          }
        }
      }
    }
  ],
  "parameters": {
    "publisher": {
      "type": "string",
      "metadata": {
        "description": "Required. Display name of the FinOps hub app publisher."
      }
    },
    "namespace": {
      "type": "string",
      "metadata": {
        "description": "Required. Namespace to use for the FinOps hub app publisher. Will be combined with appName to form a fully-qualified identifier. Must be an alphanumeric string without spaces or special characters except for periods. This value should never change and will be used to uniquely identify the publisher. A change would require migrating content to the new publisher. Namespace + appName + telemetryString must be 50 characters or less - additional characters will be trimmed."
      }
    },
    "appName": {
      "type": "string",
      "metadata": {
        "description": "Required. Unique identifier of the FinOps hub app within the publisher namespace. Must be an alphanumeric string without spaces or special characters. This name should never change and will be used with the namespace to fully qualify the app. A change would require migrating content to the new app. Namespace + appName + telemetryString must be 50 characters or less - additional characters will be trimmed."
      }
    },
    "displayName": {
      "type": "string",
      "metadata": {
        "description": "Required. Display name of the FinOps hub app."
      }
    },
    "appVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Version number of the FinOps hub app."
      }
    },
    "features": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/HubAppFeature"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Indicate which features the app requires. Allowed values: \"Storage\". Default: [] (none)."
      }
    },
    "telemetryString": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Custom string with additional metadata to log. Must an alphanumeric string without spaces or special characters except for underscores and dashes. Namespace + appName + telemetryString must be 50 characters or less - additional characters will be trimmed."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Custom name for the Storage Account. If not provided, a name will be generated based on the hub name."
      }
    },
    "dataFactoryName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Custom name for the Data Factory. If not provided, a name will be generated based on the hub name."
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Custom name for the Key Vault. If not provided, a name will be generated based on the hub name."
      }
    },
    "coreConfig": {
      "$ref": "#/definitions/HubCoreConfig",
      "metadata": {
        "description": "Required. FinOps hub coreConfig."
      }
    }
  },
  "variables": {
    "appConfig": "[__bicep.newAppConfig(parameters('coreConfig'), parameters('publisher'), parameters('namespace'), parameters('appName'), parameters('displayName'), parameters('appVersion'), parameters('storageAccountName'), parameters('dataFactoryName'), parameters('keyVaultName'))]",
    "usesDataFactory": "[contains(parameters('features'), 'DataFactory')]",
    "usesKeyVault": "[contains(parameters('features'), 'KeyVault')]",
    "usesStorage": "[contains(parameters('features'), 'Storage')]",
    "telemetryId": "[format('ftk-hubapp-{0}{1}{2}', variables('appConfig').app.fullName, if(empty(parameters('telemetryString')), '', '_'), parameters('telemetryString'))]",
    "telemetryProps": {
      "mode": "Incremental",
      "template": {
        "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
        "contentVersion": "1.0.0.0",
        "metadata": {
          "_generator": {
            "name": "[format('FTK: {0} - {1} {2}', parameters('publisher'), parameters('displayName'), variables('telemetryId'))]",
            "version": "[parameters('appVersion')]"
          }
        },
        "resources": []
      }
    },
    "storageInfrastructureEncryptionProperties": "[if(not(parameters('coreConfig').storage.isInfrastructureEncrypted), createObject(), createObject('encryption', createObject('keySource', 'Microsoft.Storage', 'requireInfrastructureEncryption', parameters('coreConfig').storage.isInfrastructureEncrypted)))]",
    "_1.usePublisherSpecificResources": false
  },
  "resources": {
    "blobEndpoint::blobPrivateDnsZoneGroup": {
      "condition": "[and(variables('usesStorage'), parameters('coreConfig').network.isPrivate)]",
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}/{1}', format('{0}-blob-ep', variables('appConfig').publisher.storage), 'storage-endpoint-zone')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
            }
          }
        ]
      },
      "dependsOn": [
        "blobEndpoint"
      ]
    },
    "dfsEndpoint::dfsPrivateDnsZoneGroup": {
      "condition": "[and(variables('usesStorage'), parameters('coreConfig').network.isPrivate)]",
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}/{1}', format('{0}-dfs-ep', variables('appConfig').publisher.storage), 'dfs-endpoint-zone')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "[format('privatelink.dfs.{0}', environment().suffixes.storage)]",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.dfs.{0}', environment().suffixes.storage))]"
            }
          }
        ]
      },
      "dependsOn": [
        "dfsEndpoint"
      ]
    },
    "keyVault::keyVault_accessPolicies": {
      "condition": "[variables('usesKeyVault')]",
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', variables('appConfig').publisher.keyVault, 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "objectId": "[reference('dataFactory', '2018-06-01', 'full').identity.principalId]",
            "tenantId": "[subscription().tenantId]",
            "permissions": {
              "secrets": [
                "get"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "dataFactory",
        "keyVault"
      ]
    },
    "keyVaultPrivateDnsZone::keyVaultPrivateDnsZoneLink": {
      "condition": "[and(variables('usesKeyVault'), parameters('coreConfig').network.isPrivate)]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2024-06-01",
      "name": "[format('{0}/{1}', format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore')), format('{0}-link', replace(format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore')), '.', '-')))]",
      "location": "global",
      "tags": "[__bicep.getPublisherTags(variables('appConfig'), 'Microsoft.Network/privateDnsZones/virtualNetworkLinks')]",
      "properties": {
        "virtualNetwork": {
          "id": "[parameters('coreConfig').network.id]"
        },
        "registrationEnabled": false
      },
      "dependsOn": [
        "keyVaultPrivateDnsZone"
      ]
    },
    "keyVaultEndpoint::keyVaultPrivateDnsZoneGroup": {
      "condition": "[and(variables('usesKeyVault'), parameters('coreConfig').network.isPrivate)]",
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}/{1}', format('{0}-ep', variables('appConfig').publisher.keyVault), 'keyvault-endpoint-zone')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "[format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore'))]",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore')))]"
            }
          }
        ]
      },
      "dependsOn": [
        "keyVaultEndpoint",
        "keyVaultPrivateDnsZone"
      ]
    },
    "appTelemetry": {
      "condition": "[parameters('coreConfig').deployment.isTelemetryEnabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[if(lessOrEquals(length(variables('telemetryId')), 64), variables('telemetryId'), substring(variables('telemetryId'), 0, 64))]",
      "tags": "[__bicep.getAppTags(variables('appConfig'), 'Microsoft.Resources/deployments', true())]",
      "properties": "[variables('telemetryProps')]"
    },
    "dataFactory": {
      "condition": "[variables('usesDataFactory')]",
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "name": "[variables('appConfig').publisher.dataFactory]",
      "location": "[variables('appConfig').hub.location]",
      "tags": "[__bicep.getPublisherTags(variables('appConfig'), 'Microsoft.DataFactory/factories')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "globalConfigurations": {
          "PipelineBillingEnabled": "true"
        }
      }
    },
    "storageAccount": {
      "condition": "[variables('usesStorage')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('appConfig').publisher.storage]",
      "location": "[parameters('coreConfig').hub.location]",
      "sku": {
        "name": "[parameters('coreConfig').storage.sku]"
      },
      "kind": "BlockBlobStorage",
      "tags": "[__bicep.getPublisherTags(variables('appConfig'), 'Microsoft.Storage/storageAccounts')]",
      "properties": "[shallowMerge(createArray(variables('storageInfrastructureEncryptionProperties'), createObject('supportsHttpsTrafficOnly', true(), 'allowSharedKeyAccess', true(), 'isHnsEnabled', true(), 'minimumTlsVersion', 'TLS1_2', 'allowBlobPublicAccess', false(), 'publicNetworkAccess', 'Enabled', 'networkAcls', createObject('bypass', 'AzureServices', 'defaultAction', if(parameters('coreConfig').network.isPrivate, 'Deny', 'Allow')))))]"
    },
    "blobPrivateDnsZone": {
      "condition": "[and(variables('usesStorage'), parameters('coreConfig').network.isPrivate)]",
      "existing": true,
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2024-06-01",
      "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
    },
    "blobEndpoint": {
      "condition": "[and(variables('usesStorage'), parameters('coreConfig').network.isPrivate)]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}-blob-ep', variables('appConfig').publisher.storage)]",
      "location": "[parameters('coreConfig').hub.location]",
      "tags": "[__bicep.getPublisherTags(variables('appConfig'), 'Microsoft.Network/privateEndpoints')]",
      "properties": {
        "subnet": {
          "id": "[parameters('coreConfig').network.subnets.storage]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "blobLink",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('appConfig').publisher.storage)]",
              "groupIds": [
                "blob"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "dfsPrivateDnsZone": {
      "condition": "[and(variables('usesStorage'), parameters('coreConfig').network.isPrivate)]",
      "existing": true,
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2024-06-01",
      "name": "[format('privatelink.dfs.{0}', environment().suffixes.storage)]"
    },
    "dfsEndpoint": {
      "condition": "[and(variables('usesStorage'), parameters('coreConfig').network.isPrivate)]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}-dfs-ep', variables('appConfig').publisher.storage)]",
      "location": "[parameters('coreConfig').hub.location]",
      "tags": "[__bicep.getPublisherTags(variables('appConfig'), 'Microsoft.Network/privateEndpoints')]",
      "properties": {
        "subnet": {
          "id": "[parameters('coreConfig').network.subnets.storage]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "dfsLink",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('appConfig').publisher.storage)]",
              "groupIds": [
                "dfs"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "keyVault": {
      "condition": "[variables('usesKeyVault')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "name": "[variables('appConfig').publisher.keyVault]",
      "location": "[parameters('coreConfig').hub.location]",
      "tags": "[__bicep.getPublisherTags(variables('appConfig'), 'Microsoft.KeyVault/vaults')]",
      "properties": {
        "sku": {
          "name": "[parameters('coreConfig').keyVault.sku]",
          "family": "A"
        },
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true,
        "enabledForDiskEncryption": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enableRbacAuthorization": false,
        "createMode": "default",
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "objectId": "[reference('dataFactory', '2018-06-01', 'full').identity.principalId]",
            "tenantId": "[subscription().tenantId]",
            "permissions": {
              "secrets": [
                "get"
              ]
            }
          }
        ],
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "[if(parameters('coreConfig').network.isPrivate, 'Deny', 'Allow')]"
        }
      },
      "dependsOn": [
        "dataFactory"
      ]
    },
    "keyVaultPrivateDnsZone": {
      "condition": "[and(variables('usesKeyVault'), parameters('coreConfig').network.isPrivate)]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2024-06-01",
      "name": "[format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore'))]",
      "location": "global",
      "tags": "[__bicep.getPublisherTags(variables('appConfig'), 'Microsoft.Network/privateDnsZones')]",
      "properties": {}
    },
    "keyVaultEndpoint": {
      "condition": "[and(variables('usesKeyVault'), parameters('coreConfig').network.isPrivate)]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}-ep', variables('appConfig').publisher.keyVault)]",
      "location": "[parameters('coreConfig').hub.location]",
      "tags": "[__bicep.getPublisherTags(variables('appConfig'), 'Microsoft.Network/privateEndpoints')]",
      "properties": {
        "subnet": {
          "id": "[parameters('coreConfig').network.subnets.keyVault]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "keyVaultLink",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('appConfig').publisher.keyVault)]",
              "groupIds": [
                "vault"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "keyVault"
      ]
    }
  },
  "outputs": {
    "config": {
      "$ref": "#/definitions/HubAppConfig",
      "metadata": {
        "description": "FinOps hub app configuration."
      },
      "value": "[variables('appConfig')]"
    },
    "principalId": {
      "type": "string",
      "metadata": {
        "description": "Principal ID for the managed identity used by Data Factory."
      },
      "value": "[reference('dataFactory', '2018-06-01', 'full').identity.principalId]"
    }
  }
}
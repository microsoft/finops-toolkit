expression RangeStart = null meta [IsParameterQuery=true, Type="DateTime", IsParameterQueryRequired=false]
	lineageTag: 90085870-f708-4bc2-90c1-3a343e88a26b
	queryGroup: 'üõ†Ô∏è Setup'

	annotation PBI_ResultType = Null

	annotation PBI_NavigationStepName = Navigation

expression RangeEnd = null meta [IsParameterQuery=true, Type="DateTime", IsParameterQueryRequired=false]
	lineageTag: 695f1d3b-7b1a-49fa-8d83-f2c25dc787de
	queryGroup: 'üõ†Ô∏è Setup'

	annotation PBI_ResultType = Null

	annotation PBI_NavigationStepName = Navigation

expression '‚ñ∂Ô∏è  START HERE' = ```
		let
		    // Storage
		    StorageUrl = #"Cluster URI",
		    UrlSegments = if StorageUrl <> null then Text.Split(StorageUrl, "/") else {},
		    UrlSegmentCount = List.Count(UrlSegments),
		    StorageCheck = 
		        if StorageUrl = "" or StorageUrl = null then {"‚úñ Invalid", "Storage URL not specified."}
		        else if Text.StartsWith(StorageUrl, "https://") = false then {"‚úñ Invalid", "Storage URL must be a valid HTTPS path."} 
		        else if (UrlSegmentCount = 4 and Text.Lower(UrlSegments{3}) = "ingestion") or (UrlSegmentCount = 7 and Text.Lower(UrlSegments{5}) = "Files" and Text.Lower(UrlSegments{6}) = "ingestion") then (
		            let
		                // Looks like hubs; try to get hub version
		                Settings = try Json.Document(AzureStorage.DataLake(StorageUrl & (if UrlSegmentCount = 3 then "/config" else "/../config")){[Name="settings.json"]}[Content], 1252) otherwise null,
		                HubVersion = if Settings <> null then try Settings[version] otherwise null else null,
		                Output = 
		                    if HubVersion = null then (
		                        if UrlSegmentCount = 4                                               and Text.Lower(UrlSegments{3}) = "ingestion" then {"‚ùìÔ∏è Unconfirmed", "Unable to confirm FinOps hub version from storage: " & Text.Split(StorageUrl, "."){0} & "."}
		                        else if UrlSegmentCount = 7 and Text.Lower(UrlSegments{5}) = "Files" and Text.Lower(UrlSegments{6}) = "ingestion" then {"‚ùìÔ∏è Unconfirmed", "Unable to confirm FinOps hub version from OneLake: " & Text.Split(StorageUrl, "."){0} & "."}
		                        else {"‚úñÔ∏è Invalid", "Configured storage account does not have FinOps hubs deployed."}
		                    )
		                    else {"‚úîÔ∏è Specified", "Will use FinOps hub v" & HubVersion & " storage: " & Text.Split(StorageUrl, "."){0} & "."}
		            in
		                Output
		        )
		        else if (try AzureStorage.DataLake(StorageUrl) otherwise null) <> null then {"‚úîÔ∏è Specified", "Will use exports in storage account: " & Text.Split(StorageUrl, "."){0} & "."}
		        // TODO: Read export manifests from the storage account to validate data is available
		        else {"‚úñÔ∏è Invalid", "Unable to connect to the specified storage account: " & Text.Split(StorageUrl, "."){0} & "."},
		
		    // Incremental refresh
		    DateEnd = RangeEnd,
		    DateStart = RangeStart,
		    DateMonths = #"Number of Months",
		    DateStartEffective = if DateStart <> null and DateStart <> "" then DateStart else Date.AddMonths(if DateEnd <> null and DateEnd <> "" then DateEnd else Date.AddMonths(Date.StartOfMonth(DateTime.LocalNow()), 1), -DateMonths+1),
		    _formatDate = (d) => try DateTime.ToText(d, [Format="MMM d, yyyy"]) otherwise d,
		    DateStartFormat = 
		        if (DateStart = null or DateStart = "") and (DateMonths = null or DateMonths < 1) then "*"
		        else if (DateStart = null or DateStart = "") and DateMonths <> null and DateMonths >= 1 then _formatDate(DateStartEffective)
		        else _formatDate(DateStart),
		    DateEndFormat = if DateEnd = null or DateEnd = "" then "*" else _formatDate(DateEnd),
		    DateValue = 
		        if DateStartFormat = "*" and DateEndFormat = "*" then "(no dates)" else DateStartFormat & " - " & DateEndFormat,
		    DateCheck =
		        // TODO: Catch when DateEnd and DateMonths create a start date in the future
		        if DateValue = "(no dates)"   then {"‚ö†Ô∏è Warning", "Will pull all data. May fail if over $2-5M."}
		        else if DateStart <> null and DateStart <> "" and DateEndFormat = "*" then {"‚ö†Ô∏è Warning", "Will pull all data after start date. May fail if over $2-5M."}
		        else if (DateStart = null or DateStart = "")  and DateEndFormat = "*" then {"‚úîÔ∏è Specified", "Will pull data for the last " & (if DateMonths = 1 then "1 month" else (Text.From(DateMonths) & " months")) & "."}
		        else if DateStartFormat = "*" then {"‚ö†Ô∏è Warning", "Will pull all data before end date. May fail if over $2-5M."}
		        else if DateStart <> null and DateStart <> "" and DateStart > DateEnd then {"‚úñ Invalid", "The start date must be before the end date."}
		        else if DateStart <> null and DateStart <> "" and DateStart < DateEnd then try {"‚úîÔ∏è Specified", "Will pull data for " & Number.ToText(Duration.Days(DateEnd - DateStart)) & " days."} otherwise {"‚úñ Invalid", "Unable to parse dates: " & DateStart & " - " & DateEnd & "."}
		        else if DateStart = null and DateMonths <> null and DateMonths < 1 then {"‚úñ Invalid", "The number of months must be more 1 or more (empty for all)."}
		        else if DateStart = null and DateMonths <> null and DateMonths > 0 then try {"‚úîÔ∏è Specified", "Will pull data for " & Number.ToText(Duration.Days(DateEnd - DateStartEffective)) & " days."} otherwise {"‚úñ Invalid", "Unable to parse dates: " & DateStartEffective & " - " & DateEnd & "."}
		        else {"‚úñ Invalid", "Unable to confirm dates: " & (if DateStart = null then "(null)" else ("'"&Text.From(DateStart)&"'")) & " - " & (if DateEnd = null then "(null)" else ("'"&Text.From(DateEnd)&"'")) & " or # of months: " & (if DateMonths = null then "(null)" else ("'"&Text.From(DateMonths)&"'")) & "."},
		
		    // 
		    /*
		    Step1 = Table.InsertRows(#table({"Instructions", "Value", "Status", "Message"}, {}), 0, {
		        [ Instructions = "‚ë† Set the data source parameter on the left", Value = SourceType, Status = SourceCheck{0}, Message = SourceCheck{1} ],
		        [ Instructions = "        ‚ûñ About exports @ https://aka.ms/finops/toolkit/exports", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ About FinOps hubs @ https://aka.ms/finops/hubs", Value = "", Status = "", Message = "" ],
		        [ Instructions = "", Value = "", Status = "", Message = "" ]
		    }),
		
		    MainChecks = Table.InsertRows(Step1, 4, 
		    */
		
		    MainChecks = Table.InsertRows(#table({"Instructions", "Value", "Status", "Message"}, {}), 0, {
		        [ Instructions = "‚ë† Set the storage URL on the left", Value = StorageUrl, Status = StorageCheck{0}, Message = StorageCheck{1} ],
		        [ Instructions = "        If using FinOps hubs:", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ Go to your hub resource group", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ Open Deployments > `hub` > Outputs", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ Copy the 'HubUrlForPowerBI' value", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        If using exports:", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ Go to your storage account", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ Open Endpoints", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ Copy the 'Data Lake Storage' value", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ‚ûñ Optionally add a container or file path", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ", Value = "", Status = "", Message = "" ],
		        [ Instructions = "‚ë¢ Optional: Set the desired date range", Value = DateValue, Status = DateCheck{0}, Message = DateCheck{1} ],
		        //[ Instructions = "        ‚ûñ Dates are only required to support incremental refresh", Value = "", Status = "", Message = if DateCheck{0} = "‚ö†Ô∏è Warning" then "Incremental refresh requires dates." else if DateCheck{0} = "‚úîÔ∏è Specified" then "Please configure incremental refresh to support up to $2-5M/mo." else "" ],
		        [ Instructions = "        ‚ûñ NOTE: Power BI only supports a total of $2-5M without incremental refresh", Value = "", Status = "", Message = "" ],
		        [ Instructions = "        ", Value = "", Status = "", Message = "" ]
		    })
		in
		    MainChecks
		```
	lineageTag: 6cfe80b8-1c4b-4c11-9916-43fc98b49dac
	queryGroup: 'üõ†Ô∏è Setup'

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

/// Optional. Number of months to include in the report before the RangeEnd date. Ignored if RangeStart is specified. Default: (all available data).
expression 'Number of Months' = 3 meta [IsParameterQuery=true, Type="Number", IsParameterQueryRequired=false]
	lineageTag: 1d47668d-4de6-404c-8e53-f89a35081e8b
	queryGroup: 'üõ†Ô∏è Setup'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Number

/// URI of the FinOps hub Azure Data Explorer cluster to pull data from. Copy from the "clusterUri" deployment output.
/// 
/// Pro tip: As a shortcut, you can alternatively use the "{name}.{region}" subset of the URI.
expression 'Cluster URI' = "khub-mf.westcentralus" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: 5204bb07-e939-4ac4-b800-ade703a31af4
	queryGroup: 'üõ†Ô∏è Setup'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

/// Indicate whether you want to view daily or monthly data in this report. If using daily, you may need to set the number of months to be a lower number depending on how many resources you have.
expression 'Daily or Monthly' = "Daily" meta [IsParameterQuery=true, List={"Daily", "Monthly"}, DefaultValue="Daily", Type="Text", IsParameterQueryRequired=true]
	lineageTag: cf257a84-c284-44da-87a5-2d9cf8f66c28
	queryGroup: 'üõ†Ô∏è Setup'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text


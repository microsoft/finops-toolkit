/// Files in the conigured storage account.
table StorageData
	lineageTag: 4dbd4a61-a185-428e-83f1-b5b3dcb80134

	measure MonthRange = FORMAT(MIN([Month]), "Mmm yyyy") & IF(FORMAT(MIN([Month]), "Mmm yyyy")=FORMAT(MAX([Month]), "Mmm yyyy"), "", "-" & FORMAT(MAX([Month]), "Mmm yyyy"))
		lineageTag: 7fbe39b4-0042-40c0-bd30-a4f5fd03cc84

	measure UpdatedRange = FORMAT(MIN([Updated]), "Mmm d") & IF(FORMAT(MIN([Updated]), "Mmm d")=FORMAT(MAX([Updated]), "Mmm d"), FORMAT(MIN([Updated]), ", yyyy"), "-" & FORMAT(MAX([Updated]), "Mmm d, yyyy"))
		lineageTag: 3ac1669e-9949-4c2d-a487-b464071ac964

	column Scope
		dataType: string
		lineageTag: 6e1750bf-1693-4052-a2e2-82980a91d650
		summarizeBy: none
		sourceColumn: Scope

		annotation SummarizationSetBy = Automatic

	column Dataset
		dataType: string
		lineageTag: 84bc2140-1b6b-46ea-b4a7-874539642ed9
		summarizeBy: none
		sourceColumn: Dataset

		annotation SummarizationSetBy = Automatic

	column Month
		dataType: dateTime
		formatString: Mmm yyyy
		lineageTag: bb30ba04-df29-49e4-a222-67a27d0efb3e
		summarizeBy: none
		sourceColumn: Month

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

		annotation PBI_FormatHint = {"isCustom":true}

	column StorageAccount
		dataType: string
		lineageTag: 66288752-33a8-4131-8404-fb52ae8581e5
		summarizeBy: none
		sourceColumn: StorageAccount

		annotation SummarizationSetBy = Automatic

	column StorageContainer
		dataType: string
		lineageTag: 3b8c5e64-27ac-430d-99f9-7fb12db5d019
		summarizeBy: none
		sourceColumn: StorageContainer

		annotation SummarizationSetBy = Automatic

	column StoragePath
		dataType: string
		lineageTag: 03e9da48-40b1-4ff7-a857-260881967417
		summarizeBy: none
		sourceColumn: StoragePath

		annotation SummarizationSetBy = Automatic

	column ExportName
		dataType: string
		lineageTag: fd3413c1-3c7c-47e2-af62-a27f14cf1c47
		summarizeBy: none
		sourceColumn: ExportName

		annotation SummarizationSetBy = Automatic

	column DatasetVersion
		dataType: string
		lineageTag: d6896a27-acb6-40cb-9964-64696a92fdb9
		summarizeBy: none
		sourceColumn: DatasetVersion

		annotation SummarizationSetBy = Automatic

	column SizeInGB
		dataType: double
		lineageTag: fe95bde2-7be9-4c3b-97c5-cec6ea4c0f8a
		summarizeBy: sum
		sourceColumn: SizeInGB

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column AllFiles
		dataType: int64
		formatString: 0
		lineageTag: c5991573-2156-46e5-979a-7b20be750f14
		summarizeBy: sum
		sourceColumn: AllFiles

		annotation SummarizationSetBy = Automatic

	column ConfigFiles
		dataType: int64
		formatString: 0
		lineageTag: 5814e060-ddc6-4c5a-a6f4-ecc41c35eca4
		summarizeBy: sum
		sourceColumn: ConfigFiles

		annotation SummarizationSetBy = Automatic

	column DataFiles
		dataType: int64
		formatString: 0
		lineageTag: e731a427-1b90-41e1-b0ad-053872fb0404
		summarizeBy: sum
		sourceColumn: DataFiles

		annotation SummarizationSetBy = Automatic

	column UnsupportedFiles
		dataType: int64
		formatString: 0
		lineageTag: 7ef9dd76-351c-4d2d-ad14-a04e93fe6654
		summarizeBy: sum
		sourceColumn: UnsupportedFiles

		annotation SummarizationSetBy = Automatic

	column Created
		dataType: dateTime
		formatString: General Date
		lineageTag: b6232703-74bc-40da-88b7-6332fcfe5ee2
		summarizeBy: none
		sourceColumn: Created

		annotation SummarizationSetBy = Automatic

	column Errors
		dataType: string
		lineageTag: 6c6f9508-0bea-4fd8-981b-a92aa691cc99
		summarizeBy: none
		sourceColumn: Errors

		annotation SummarizationSetBy = Automatic

	column Updated
		dataType: dateTime
		formatString: General Date
		lineageTag: 98d0aa5f-eb22-4c87-ac5a-4b87bfa46c9c
		summarizeBy: none
		sourceColumn: Updated

		annotation SummarizationSetBy = Automatic

	partition StorageData = m
		mode: import
		queryGroup: Storage
		source = ```
				let
					urlSegments = Text.Split(#"Storage URL", "/"),
					ADLS = if #"Storage URL" = "" or #"Storage URL" = null then null
						else if List.Count(urlSegments) = 4 and urlSegments{3} = "ingestion" then AzureStorage.DataLake(#"Storage URL" & "/..")
						else if List.Count(urlSegments) = 7 and urlSegments{5} = "Files" and urlSegments{6} = "ingestion" then AzureStorage.DataLake(#"Storage URL" & "/..")
						else AzureStorage.DataLake(#"Storage URL"),
				
					Files = Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(ADLS,
						"Segments",         each Text.Split(Text.Replace(Text.Trim([Folder Path], "/"), "https://", ""), "/")),
						"SegmentCount",     each List.Count([Segments])),
						"StorageAccount",   each Text.Split([Segments]{0}, "."){0}),
						"StorageContainer", each [Segments]{1}),
						"SizeInGB",     each 1.0 * [Attributes][Size] / 1000000000.0, type number),
						// "FileType", 
						//     each if [StorageContainer] <> "config" and [StorageContainer] <> "msexports" and [StorageContainer] <> "ingestion" then "Custom Content"
						//     else if [StorageContainer] = "config" and [Name] = "settings.json" then "Hub Settings"
						//     else if [StorageContainer] = "msexports" and [Name] = "manifest.json" then "Export Manifest"
						//     else if [StorageContainer] = "msexports" and [Name] = "_manifest.json" then "Legacy Export Manifest"
						//     else if [StorageContainer] = "msexports" and [Extension] = ".csv" then "Export CSV"
						//     else if [StorageContainer] <> "msexports" and [Extension] = ".csv" then "Unknown CSV"
						//     else if [StorageContainer] = "ingestion" and [Extension] = ".parquet" then "Ingested Parquet"
						//     else if [StorageContainer] <> "ingestion" and [Extension] = ".parquet" then "Unknown Parquet"
						//     else "Unsupported File"
						// ),
						// Identify intent
						// TODO: Need to update to account for legacy exports which have an extra level
						"IsExport",
							each ([Name] = "manifest.json" or [Name] = "_manifest.json" or [Extension] = ".csv" or [Extension] = ".gz" or [Extension] = ".parquet") and (
								   ([SegmentCount] >= 7 and Text.Length([Segments]{[SegmentCount]-1}) = 36 and Text.Length([Segments]{[SegmentCount]-2}) = 12 and Text.Length([Segments]{[SegmentCount]-3}) = 17)
								or ([SegmentCount] >= 6 and Text.Length([Segments]{[SegmentCount]-1}) = 36 and Text.Length([Segments]{[SegmentCount]-2}) = 12)
								or ([SegmentCount] >= 7 and Text.Length([Segments]{[SegmentCount]-1}) = 36 and Text.Length([Segments]{[SegmentCount]-2}) = 17) // Exports v2 preview bug had a missing folder (remove after June 2025)
							)
						),
				
					// NOTE: Do not convert to UTC - UTC dates can show as the previous month based on the local timezone
					_toMonth   = (s) => Date.FromText(Text.Range(s, 0, 4) & "-" & Text.Range(s, 4, 2) & "-01"),
				
					// Update segments to handle differences
					_swapCol     = (tbl, oldCol, newCol, newValFunc, optional newType) => let add = Table.AddColumn(tbl, newCol, newValFunc, newType), del = if Table.HasColumns(add, oldCol) then Table.RemoveColumns(add, {oldCol}) else add in del,
					_updateCol   = (tbl, col, newValFunc, optional newType) => let tmpCol = Text.Combine({"tmp_", col}), tmp = _swapCol(tbl, col, tmpCol, newValFunc, newType), ren = Table.RenameColumns(tmp, {{tmpCol, col}}) in ren,
					FixSegments  = _updateCol(_updateCol(Files,
						"Segments", each
							let
								count = List.Count([Segments]),
								output = 
									if count > 6 and Text.Length([Segments]{count-1}) = 36 and Text.Length([Segments]{count-2}) = 17 
									then List.InsertRange([Segments], count-2, {Text.Range([Segments]{count-2}, 0, 8) & "0000"}) 
									else [Segments]
							in
								output
						),
						"SegmentCount", each List.Count([Segments])),
				
					_supportedDatasets = {"CommitmentDiscountUsage","Costs","Prices","Recommendations","Transactions"},
					_supportedExportTypes = {"focuscost","pricesheet","reservationdetails","reservationrecommendations","reservationtransactions"},
					Details = Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(Table.AddColumn(FixSegments,
						"IsConfig",          each [StorageContainer] = "config" and [Name] = "settings.json"),
						"IsManifest",        each [IsExport] and ([Name] = "manifest.json" or [Name] = "_manifest.json")),
						"IsLegacyManifest",  each [IsManifest] and [Name] = "_manifest.json"),
						"IsData",            each [Extension] = ".csv" or [Extension] = ".parquet"),
						"IsLegacyIngestion", each [Extension] = ".parquet" and [SegmentCount] > 5 and ([Segments]{2} = "subscriptions" or [Segments]{2} = "providers") and Text.Lower([Segments]{[SegmentCount]-1}) = "focuscost" and Text.Length([Segments]{[SegmentCount]-2}) = 6),
						"IsIngestion",       each [Extension] = ".parquet" and (
							   ([SegmentCount] > 4 and List.Contains(_supportedExportTypes, Text.Lower([Segments]{2})) and Text.Length([Segments]{3}) = 4 and Text.Length([Segments]{4}) = 2)
							or ([SegmentCount] > 4 and List.Contains(_supportedDatasets,               [Segments]{2})  and Text.Length([Segments]{3}) = 4 and Text.Length([Segments]{4}) = 2)
						)),
						"ContentType",
							each if [IsConfig]                                                      then "Hub Settings"
							else if [StorageContainer] = "config" and (Text.StartsWith([Name], "focuscost_") or [Segments]{2} = "schemas") and [Extension] = ".json" then "Dataset Schema"
							else if [IsManifest]                                                    then "Exported Manifest"
							else if [IsExport] and [IsData]                                         then "Exported Data"
							else if [StorageContainer] =  "msexports" and [IsExport] = false        then "Unsupported Content"
							else if [StorageContainer] <> "msexports" and [IsExport]                then "Orphaned Export"
							else if ([IsIngestion] or [IsLegacyIngestion]) and [IsData]             then "Ingested Data"
							else if [StorageContainer] = "ingestion" and [IsIngestion] = false and [IsLegacyIngestion] = false then "Unsupported Content"
							else "Unsupported Content"
						),
						// IngestionParquet = Table.AddColumn(ContentType,      "IngestionParquet", each if [FileType] = "Ingestion Parquet" then 1 else 0),
						// ExportManifest   = Table.AddColumn(IngestionParquet, "ExportManifest",   each if [FileType] = "Export Manifest" then 1 else 0),
						// ExportedCsv      = Table.AddColumn(ExportManifest,   "ExportedCsv",      each if [FileType] = "Export CSV" then 1 else 0),
						"StoragePath", each 
							let
								path = try (
									if [IsLegacyIngestion] then Text.Combine(List.Range([Segments], 2, [SegmentCount] - 4), "/") // Segments to remove: 0:storage account + 1:container + month + dataset
									else if [IsIngestion]  then Text.Combine(List.Range([Segments], 5, [SegmentCount] - 1), "/") // Segments to remove: 0:storage account + 1:container + 2:dataset + 3:year + 4:month
									else if [IsExport]     then Text.Combine(List.Range([Segments], 2, [SegmentCount] - 6), "/") // Segments to remove: storage account + container + export name + date range + export timestamp + export run id
									else null
								)
								otherwise null,
								out = "/" & (if path <> null then path else Text.Combine(List.Range([Segments], 2, [SegmentCount] - 2), "/"))
							in
								out
						),
						"IsScope",    each [StoragePath] <> null and (Text.StartsWith(Text.Lower([StoragePath]), "/subscriptions/") or Text.StartsWith(Text.Lower([StoragePath]), "/providers/"))),
						"Scope",      each if [IsScope] then [StoragePath] else null),
						"Month",
							each if [IsExport] and Text.StartsWith([Segments]{[SegmentCount]-3}, "20") then _toMonth([Segments]{[SegmentCount]-3}) 
							else if [IsExport] and Text.StartsWith([Segments]{[SegmentCount]-2}, "20") then _toMonth([Segments]{[SegmentCount]-2}) 
							else if [IsLegacyIngestion] then _toMonth([Segments]{[SegmentCount]-2})
							else if [IsIngestion]       then _toMonth([Segments]{3} & [Segments]{4})
							else null,
							type date
						),
						"Json",       each if [IsConfig] or ([IsExport] and [IsManifest]) then try Json.Document([Content]) otherwise null else null),
						"HubVersion", each if [IsConfig] and [Json] <> null then Record.FieldOrDefault([Json], "version", null) else null),
						// TODO: If checking retention
						// Retention       = Table.ExpandRecordColumn(ToTable, "retention", {"msexports", "ingestion"}, {"retention.msexports", "retention.ingestion"}),
						// ExportRetention = Table.ExpandRecordColumn(Retention, "retention.msexports", {"days"}, {"ExportRetentionInDays"}),
						// IngestRetention = Table.ExpandRecordColumn(ExportRetention, "retention.ingestion", {"months"}, {"IngestionRetentionInMonths"}),
						// TODO: If checking configured scopes -- ScopeCount = Table.AddColumn(IngestRetention, "Scopes", each List.Count(List.RemoveMatchingItems([scopes], {"/foo", ""}))),
						// TODO: Need to update to account for legacy exports which have an extra level
						"ExportName",
							each if [Json] <> null and [IsExport] and [IsManifest] and [IsLegacyManifest] = false then [Json][exportConfig][exportName]
							else if [IsExport] and Text.Length([Segments]{[SegmentCount]-3}) = 17 then [Segments]{[SegmentCount]-4}
							else if [IsExport] then [Segments]{[SegmentCount]-3}
							else null
						),
						"ApiVersion", 
							each if [Json] <> null and [IsExport] and [IsManifest] then (
								if [IsLegacyManifest] then [Json][manifestVersion] 
								else [Json][exportConfig][apiVersion] 
							)
							else null
						),
						// RowCount    = Table.AddColumn(ApiVersion, "DatasetRows", each if [Name] = "manifest.json" then [Manifest][dataRowCount] else null, type number),
						// TimeFrame   = Table.AddColumn(ApiVersion, "TimeFrame", each if [Name] = "manifest.json" then [Json][exportConfig][timeFrame] else null),
						// Granularity = Table.AddColumn(TimeFrame, "Granularity", each if [Name] = "manifest.json" then [Json][exportConfig][granularity] else null),
						"Dataset", 
							each try
								if [Json] <> null and [IsExport] and [IsManifest] then (
									if [IsLegacyManifest] then "actual/amortizedcost"
									else Text.Lower([Json][exportConfig][type]) 
								)
								else if [IsLegacyIngestion] then Text.Lower([Segments]{[SegmentCount]-1})
								else if [IsIngestion] and List.Contains(_supportedExportTypes, Text.Lower([Segments]{2})) then Text.Lower([Segments]{2})
								else if [IsIngestion] and List.Contains(_supportedDatasets, [Segments]{2}) then [Segments]{2}
								else null
							otherwise null
						),
						"DatasetVersion", each if [Json] <> null and [IsExport] and [IsManifest] and [IsLegacyManifest] = false then [Json][exportConfig][dataVersion] else null),
						// Partitioning  = Table.AddColumn(DataVersion,  "Partitioning", each if [Name] = "manifest.json" then [Json][deliveryConfig][partitionData] else null),
						// ExportFormat  = Table.AddColumn(Partitioning, "ExportFormat", each if [Name] = "manifest.json" then [Json][deliveryConfig][fileFormat] else null),
						// StoragePath    = Table.AddColumn(ExportFormat, "StoragePath", each if [Name] = "manifest.json" then [Json][deliveryConfig][rootFolderPath] else null),
						// ExportedBytes = Table.AddColumn(ExportPath,   "ExportedBytes", 
						//     each if [Name] = "manifest.json" then List.Sum(List.Transform([Json][blobs], each _[byteCount]))
						//     else if [Name] = "_manifest.json" then [Json][byteCount]
						//     else null
						// ),
						// ExportedRows = Table.AddColumn(ExportedBytes, "ExportedRows", each if [Name] = "manifest.json" then null else if [Name] = "_manifest.json" then [Json][dataRowCount] else null),
				
						// ExportedRows = Table.AddColumn(ExportedBytes, "ExportedRows", each if [Name] = "manifest.json" then null else if [Name] = "_manifest.json" then [Json][dataRowCount] else null),
				
						// Identify problems
						// TODO: Add handling for data ingestion scenarios: No exports/ingestion, Export in wrong container, Export not ingested, Exported for wrong month
						// Pipeline = if Table.RowCount(Table.SelectRows(PreCheck, each ([IsExport] or [IsIngestion]) and 1 = 2)) = 0 then Table.Combine({ PreCheck, #table({"StorageContainer", "Name"}, ({"msexports", "manifest.json"})) })
						//     //if Table.RowCount(Table.SelectRows(PreCheck, each ([StorageContainer] = "msexports" and [Name] = "manifest.json")) or ([StorageContainer] = "ingestion" and [Extension] = ".parquet")) = 0 then Table.Combine(PreCheck, Table.FromRecords({[FileCategory = "Export", FileType = "Export Manifest"]}))
						//     // else if Table.RowCount(Table.SelectRows(PreCheck, each [Extension] = ".parquet")) = 0 then _getError("NoDataIngested")
						//     else PreCheck,
						"Error",
							each try if [StorageContainer] = "config" and [Name] = "settings.json" then (
								try  if (Text.StartsWith([HubVersion], "0.0") or Text.StartsWith([HubVersion], "0.1")) then "InvalidHubVersion"
								else if [HubVersion] = "0.2"                                                           then "BadHubVersion"
								else null
								otherwise "UnknownHubVersion"
							)
							else if [StorageContainer] = "msexports" then (
								if [Name] = "manifest.json" and [Folder Path] = null then "ExportNotFound"
								else if [Name] = "_manifest.json"                    then "InvalidExportVersion"
								else if [IsExport] = false                           then "UnknownExportFile"
								else if [IsExport] and [Dataset] <> null and [Dataset] <> "" and List.Contains(_supportedDatasets, [Dataset]) = false and List.Contains(_supportedExportTypes, Text.Lower([Dataset])) = false then "UnsupportedExportType"
								else null
							)
							else if [StorageContainer] <> "msexports" and [IsExport] then "InvalidExportContainer"
							else if ([IsExport] or [IsIngestion] or [IsLegacyIngestion]) and [IsScope] = false then "InvalidScopeId"
							// TODO: Check for data exported before ??? when there were known issues in FocusCost preview
							// TODO: Check for export data type from the manifest (InvalidExportType)
							// TODO: Add a dynamic row if there is no ingested data
							// TODO: Add a dynamic row if there is no exported data
							// TODO: Add a dynamic row if the configured start/end dates are outside the dates where exports are available
							// TODO: Add a dynamic row if the config/settings.json is not found (wrong storage account)
							else null
							otherwise "ErrorCheckFailed"
						),
				
					// Cleanup
					_columns = {"Scope", "Dataset", "DatasetVersion", "Month", "Errors", "AllFiles", "ConfigFiles", "DataFiles", "UnsupportedFiles", "SizeInGB", "StorageAccount", "StorageContainer", "StoragePath", "ExportName", "Created", "Updated"},
					Finalize   = Table.ReorderColumns(
						Table.SelectColumns(
							Table.Group(
								Table.RenameColumns(Details, {{"Date modified", "Updated"}, {"Name", "FileName"}}), {
									"Scope", "Month", "StorageAccount", "StorageContainer", "StoragePath", "ExportName"// "ApiVersion"
								}, {
									{"Dataset", each List.First(List.Distinct(List.RemoveNulls([Dataset]))), type text},
									{"DatasetVersion", each List.SingleOrDefault(List.Distinct(List.RemoveNulls([DatasetVersion]))), type text},
									// "ApiVersion", "HubVersion", "IsConfig", "IsManifest", "IsLegacyManifest", "IsData", "IsExport", "IsIngestion", "Error", 
									{"AllFiles", each Table.RowCount(_), Int64.Type},
									{"ConfigFiles", each Table.RowCount(Table.SelectRows(_, each [Extension] = ".json")), Int64.Type},
									{"DataFiles", each Table.RowCount(Table.SelectRows(_, each [IsData])), Int64.Type},
									{"UnsupportedFiles", each Table.RowCount(Table.SelectRows(_, each [ContentType] = "Unsupported Content" or [ContentType] = "Orphaned Export")), Int64.Type},
									{"Errors", each List.Distinct(List.RemoveNulls([Error]))},
									// {"Content", each [ContentType]},
									{"SizeInGB", each List.Sum([SizeInGB]), type number},
									{"Created", each List.Min([Updated]), type nullable datetime}, 
									{"Updated", each List.Max([Updated]), type nullable datetime}
								}
							),
							_columns
						),
						_columns
					)
				in
					Finalize
				```

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

